{
  "_args": [
    [
      {
        "raw": "lazy-seq@https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
        "scope": null,
        "escapedName": "lazy-seq",
        "name": "lazy-seq",
        "rawSpec": "https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
        "spec": "https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
        "type": "remote"
      },
      "/home/bumblebee/tobee_blog/blog/tinymce/node_modules/@ephox/bedrock"
    ]
  ],
  "_from": "lazy-seq@>=1.0.0 <2.0.0",
  "_id": "lazy-seq@1.0.0",
  "_inCache": true,
  "_location": "/@ephox/bedrock/lazy-seq",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lazy-seq@https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
    "scope": null,
    "escapedName": "lazy-seq",
    "name": "lazy-seq",
    "rawSpec": "https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
    "spec": "https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/@ephox/bedrock",
    "/@ephox/bedrock/jsverify"
  ],
  "_resolved": "https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
  "_shasum": "880cb8aab256026382e02f53ec089682a74c5b6a",
  "_shrinkwrap": null,
  "_spec": "lazy-seq@https://registry.npmjs.org/lazy-seq/-/lazy-seq-1.0.0.tgz",
  "_where": "/home/bumblebee/tobee_blog/blog/tinymce/node_modules/@ephox/bedrock",
  "author": {
    "name": "Oleg Grenrus",
    "email": "oleg.grenrus@iki.fi",
    "url": "http://oleg.fi/"
  },
  "bugs": {
    "url": "https://github.com/phadej/lazy-seq/issues"
  },
  "dependencies": {},
  "description": "Lazy sequences",
  "devDependencies": {
    "david": "^6.0.1",
    "eslint": "^0.24.1",
    "istanbul": "^0.3.2",
    "jscs": "^2.0.0",
    "jshint": "^2.5.10",
    "jsverify": "^0.6.3",
    "ljs": "^0.3.0",
    "mocha": "^2.0.1",
    "underscore": "^1.7.0"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/phadej/lazy-seq",
  "keywords": [
    "lazy",
    "sequence"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "lazy-seq",
  "optionalDependencies": {},
  "readme": "# lazy-seq\n\n> Lazy sequences\n\n[![Build Status](https://secure.travis-ci.org/phadej/lazy-seq.svg?branch=master)](http://travis-ci.org/phadej/lazy-seq)\n[![NPM version](https://badge.fury.io/js/lazy-seq.svg)](http://badge.fury.io/js/lazy-seq)\n[![Dependency Status](https://david-dm.org/phadej/lazy-seq.svg)](https://david-dm.org/phadej/lazy-seq)\n[![devDependency Status](https://david-dm.org/phadej/lazy-seq/dev-status.svg)](https://david-dm.org/phadej/lazy-seq#info=devDependencies)\n[![Code Climate](https://img.shields.io/codeclimate/github/phadej/lazy-seq.svg)](https://codeclimate.com/github/phadej/lazy-seq)\n\n## Lazy?\n\nThe list structure could be defined as\n\n```hs\ndata Seq a = Nil | Cons a (Seq a)\n```\n\nThe `Cons` constuctor takes two arguments, so there are four different laziness variants:\n\n```hs\nCons (Strict a) (Strict (Seq a)) -- 1. fully strict\nCons (Lazy a)   (Strict (Seq a)) -- 2. lazy values\nCons (Strict a) (Lazy (Seq a))   -- 3. lazy structure\nCons (Lazy   a) (Lazy (Seq a))   -- 4. fully lazy\n```\n\nThis module implements the third variant: lazy structure, but strict values.\n\n## Example\n\n```js\nvar ones = lazyseq.cons(1, function () { return ones; });\nconsole.log(ones === ones.tail()); // true!\n```\n\n## Why?\n\nThis package is originally made to optimise shrink operations in [jsverify](http://jsverify.github.io/), a property-based testing library.\n\n## API\n\n- *nil : Seq a* &mdash; Empty sequence.\n\n- *cons : (head : a, tail : Array a | Seq a | () → Array a | () → Seq a) → Seq a* : Cons a value to the front of a sequence (list or thunk).\n\n- *.isNil : Boolean* &mdash; Constant time check, whether the sequence is empty.\n\n- *.toString : () → String* &mdash; String representation. Doesn't force the tail.\n\n- *.length : () → Nat* &mdash; Return the length of the sequene. Forces the structure.\n\n- *.toArray : () → Array a* &mdash; Convert the sequence to JavaScript array.\n\n- *.fold : (z : b, f : (a, () → b) → b) → b* &mdash; Fold from right.\n\n    ```hs\n    fold nil x f        = x\n    fold (cons h t) x f = f x (fold t x f)\n    ```\n\n- *.head : () → a* &mdash;  Extract the first element of a sequence, which must be non-empty.\n\n- *.tail : () → Seq a* &mdash; Return the tail of the sequence.\n\n    ```hs\n    tail nil        = nil\n    tail (cons h t) = t\n    ```\n\n- *.nth : (n : Nat) → a* &mdash; Return nth value of the sequence.\n\n- *.take : (n : Nat) → Seq a* &mdash; Take `n` first elements of the sequence.\n\n- *.drop : (n : Nat) → Seq a* &mdash; Drop `n` first elements of the sequence.\n\n- *.map : (f : a → b) : Seq b* &mdash; The sequence obtained by applying `f` to each element of the original sequence.\n\n- *.append : (ys : Seq a | Array a) : Seq a* &mdash; Append `ys` sequence.\n\n- *.filter : (p : a -> bool) : Seq a* &mdash; filter using `p` predicate.\n\n- *.every : (p = identity: a -> b) : b | true &mdash; return first falsy value in the sequence, true otherwise. *N.B.* behaves slightly differently from `Array::every`.\n\n- *.some : (p = identity: a -> b) : b | false &mdash; return first truthy value in the sequence, false otherwise. *N.B.* behaves slightly differently from `Array::some`.\n\n- *.contains : (x : a) : bool &mdash; Returns `true` if `x` is in the sequence.\n\n- *.containsNot : (x : a) : bool &mdash; Returns `true` if `x` is not in the sequence.\n\n- *fromArray: (arr : Array a) → Seq a* &mdash; Convert a JavaScript array into lazy sequence.\n\n- *singleton: (x : a) → Seq a* &mdash; Create a singleton sequence.\n\n- *append : (xs... : Array a | Seq a | () → Array a | () → Seq a) → Seq a* : Append one sequence-like to another.\n\n- *iterate : (x : a, f : a → a) → Seq a* &mdash; Create an infinite sequence of repeated applications of `f` to `x`: *x, f(x), f(f(x))&hellip;*.\n\n- *fold : (seq : Seq a | Array a, z : b, f : (a, () → b) → b) : b* &mdash; polymorphic version of fold. Works with arrays too.\n\n## Release History\n\n- **1.0.0** &mdash; *2015-07-28* &mdash; Stable\n  - Consider stable\n  - `singleton` constructure\n  - `.contains`, `.containsNot`, `.every` and `.some` methods\n- **0.2.0** &mdash; *2015-04-21* &mdash; `filter`\n- **0.1.0** &mdash; *2015-03-21* &mdash; `append`\n- **0.0.2** &mdash; *2014-12-20* &mdash; Fixed `fold`\n- **0.0.1** &mdash; *2014-12-20* &mdash; Initial release\n\n## Contributing\n\n- `README.md` is generated from the source with [ljs](https://github.com/phadej/ljs)\n- Before creating a pull request run `make test`, yet travis will do it for you.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/phadej/lazy-seq.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.0"
}
