{
  "_args": [
    [
      {
        "raw": "trampa@https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
        "scope": null,
        "escapedName": "trampa",
        "name": "trampa",
        "rawSpec": "https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
        "spec": "https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
        "type": "remote"
      },
      "/home/bumblebee/tobee_blog/blog/tinymce/node_modules/@ephox/bedrock"
    ]
  ],
  "_from": "trampa@>=1.0.0 <2.0.0",
  "_id": "trampa@1.0.0",
  "_inCache": true,
  "_location": "/@ephox/bedrock/trampa",
  "_phantomChildren": {},
  "_requested": {
    "raw": "trampa@https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
    "scope": null,
    "escapedName": "trampa",
    "name": "trampa",
    "rawSpec": "https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
    "spec": "https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/@ephox/bedrock",
    "/@ephox/bedrock/jsverify"
  ],
  "_resolved": "https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
  "_shasum": "5247347ac334807fa6c0000444cb91b639840ad5",
  "_shrinkwrap": null,
  "_spec": "trampa@https://registry.npmjs.org/trampa/-/trampa-1.0.0.tgz",
  "_where": "/home/bumblebee/tobee_blog/blog/tinymce/node_modules/@ephox/bedrock",
  "author": {
    "name": "Oleg Grenrus"
  },
  "bugs": {
    "url": "https://github.com/phadej/trampa/issues"
  },
  "dependencies": {},
  "description": "Trampolines, to emulate tail-recursion",
  "devDependencies": {
    "david": "^6.1.6",
    "eslint": "^0.24.1",
    "istanbul": "^0.3.17",
    "jscs": "^1.13.1",
    "jshint": "^2.8.0",
    "jsverify": "^0.6.0",
    "ljs": "^0.3.1",
    "mocha": "^2.2.5"
  },
  "homepage": "https://github.com/phadej/trampa#readme",
  "keywords": [
    "trampoline",
    "tail",
    "recursion",
    "tailcall"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "trampa",
  "optionalDependencies": {},
  "readme": "# trampa\n\nTrampolines, to emulate tail-call recursion.\n\n[![Build Status](https://secure.travis-ci.org/phadej/trampa.svg?branch=master)](http://travis-ci.org/phadej/trampa)\n[![NPM version](https://badge.fury.io/js/trampa.svg)](http://badge.fury.io/js/trampa)\n[![Dependency Status](https://david-dm.org/trampa/trampa.svg)](https://david-dm.org/trampa/trampa)\n[![devDependency Status](https://david-dm.org/trampa/trampa/dev-status.svg)](https://david-dm.org/trampa/trampa#info=devDependencies)\n[![Code Climate](https://img.shields.io/codeclimate/github/phadej/trampa.svg)](https://codeclimate.com/github/phadej/trampa)\n\n## Synopsis\n\n```js\nvar trampa = require(\"trampa\");\n\nfunction loop(n, acc) {\n  return n === 0 ? trampa.wrap(acc) : trampa.lazy(function () {\n    return loop(n - 1, acc + 1);\n  });\n}\n\nloop(123456789, 0).run(); // doesn't cause stack overflow!\n```\n\n## API\n\n- `isTrampoline(t: obj): bool` &mdash; Returns, whether `t` is a trampolined object.\n\n- `wrap(t: Trampoline a | a): Trampoline a` &mdash; Wrap `t` into trampoline, if it's not already one.\n\n- `lazy(t : () -> Trampoline a | a)` &mdash; Wrap lazy computation into trampoline. Useful when constructing computations.\n\n- `Trampoline.jump(f : a -> b | Trampoline b)` &mdash; *map* or *flatmap* trampoline computation. Like `.then` for promises.\n\n- `Trampoline.run(): a` &mdash; Run the trampoline synchronously resulting a value.\n\n## Changelog\n\n- **1.0.0** &mdash; *2015-07-14* &mdash; Initial release\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/phadej/trampa.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.0"
}
